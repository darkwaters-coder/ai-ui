/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Retweet as PrismaRetweet,
  Tweet as PrismaTweet,
  User as PrismaUser,
} from "@prisma/client";

export class RetweetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RetweetCountArgs, "select">): Promise<number> {
    return this.prisma.retweet.count(args);
  }

  async retweets(args: Prisma.RetweetFindManyArgs): Promise<PrismaRetweet[]> {
    return this.prisma.retweet.findMany(args);
  }
  async retweet(
    args: Prisma.RetweetFindUniqueArgs
  ): Promise<PrismaRetweet | null> {
    return this.prisma.retweet.findUnique(args);
  }
  async createRetweet(args: Prisma.RetweetCreateArgs): Promise<PrismaRetweet> {
    return this.prisma.retweet.create(args);
  }
  async updateRetweet(args: Prisma.RetweetUpdateArgs): Promise<PrismaRetweet> {
    return this.prisma.retweet.update(args);
  }
  async deleteRetweet(args: Prisma.RetweetDeleteArgs): Promise<PrismaRetweet> {
    return this.prisma.retweet.delete(args);
  }

  async getTweet(parentId: string): Promise<PrismaTweet | null> {
    return this.prisma.retweet
      .findUnique({
        where: { id: parentId },
      })
      .tweet();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.retweet
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
